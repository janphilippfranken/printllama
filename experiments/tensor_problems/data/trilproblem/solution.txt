class Solution:
    def algorithm(M: torch.Tensor) -> torch.Tensor:
        '''
        args:
            M: torch.Tensor of shape (N, N)

        return:
            L: torch.Tensor of shape (N, N), which is the lower triangular part of M
        '''
        N = M.size(0)
        L = torch.stack([torch.tensor([M[i, j] if i >= j else 0 for j in range(N)]) for i in range(N)])
        return L