[
    {
        "role": "system",
        "content": "You are given a task and an incorrect solution to the task."
    },
    {
        "role": "user",
        "content": "Task:\nYou are given two PyTorch tensors: A matrix `X` of shape (batch_size, n, d) and a vector `mask` of shape (batch_size, n), where `batch_size` is the number of samples, `n` is the sequence length, and `d` is the feature dimension. Your task is to create a function that applies a mask to `X` by setting elements in `X` to zero wherever the corresponding element in `mask` is zero. The output should be a tensor of the same shape as `X`.\n\nInstructions:\nCorrect the solution to satisfy the task constraints. Do not change the name of the function or the number of arguments. Return the full corrected ```algorithm``` function.\n\nHint:\nUse the print statement to help you construct the correct solution.\n\nIncorrect Solution:\n```python\nimport torch\n\n\ndef algorithm(\n    X: torch.Tensor,\n    mask: torch.Tensor\n) -> torch.Tensor:\n    '''\n    args:\n        X: torch.Tensor of shape (batch_size, n, d)\n        mask: torch.Tensor of shape (batch_size, n)\n    return:\n        output: torch.Tensor of shape (batch_size, n, d)\n    '''\n    mask = mask.unsqueeze(-1) * X.shape[2]\n    print(f'mask shape: {mask.shape}')  # prints 'mask shape: ' followed by the shape of the mask tensor\n    output = X * mask\n    return output\n```\n"
    }
]