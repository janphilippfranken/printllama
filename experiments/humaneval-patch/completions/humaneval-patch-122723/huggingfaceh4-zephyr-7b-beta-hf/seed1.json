[["def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x <= 1:\n        return False\n    for I in range(2, int(x ** (1 / n)) + 1):\n        x_pow = int(i ** n)\n        if x == x_pow:\n            return True\n        if x != x_pow and x < x_pow:\n            break\n    return False\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False"], ["def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n < 1:\n        return False\n\n    if n > 1 and x % n != 0:\n        return False\n\n    if n > 1:\n        return is_simple_power(x // n, n)\n\n    return True\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, "], ["def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1 or x == 1:\n        return True\n    elif x == n:\n        return True\n    else:\n        return x % n == 0\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    # Correction: We need to check if x is a multiple of n raised to an integer power\n    # This can be done using the exponentiation operator **\n    return n == 1 or x == 1 or x == n or (x % n == 0 and int(math.log(x / n) / math.log(n)) == 0)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1 or x == 1:\n        return True\n    elif x == n:\n        return True\n    else:\n        return x % n == 0\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    # Corrected solution:\n    if n == 1 or x == 1:\n        return x == n\n    elif x % n == 0:\n        return True\n    else:\n        return False\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    # Correction: Add an additional check for n being 0\n    if n == 0:\n        return False\n\n    # Correction: Use integer exponentiation instead of repeated multiplication\n    return n == 1 or x == 1 or x == n or (x // n) == (int(x ** 0.5) // n) == 0\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    # Correction: Add a check for negative exponents\n    if n == 1:\n        return x == 1\n    elif x == 1:\n        return True\n    elif x == n:\n        return True\n    elif n < 0:\n        return is_simple_power(x, -n)\n    else:\n        return (x % n) == 0 or is_simple_power(x // n, n)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    # Correction: We need to check if x is a multiple of n raised to an integer power\n    # This can be done using the exponentiation operator **\n    return n == 1 or x == 1 or x == n or (x % n == 0 and int(math.log2(x // n)) == 0)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    # Correction: We need to check if x is a multiple of n raised to an integer power\n    # This can be done using the exponentiation operator **\n    return n == 1 or x == 1 or x == n or (x % n == 0 and int(math.log(x / n) / math.log(n)) == 0)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1 or x == 1:\n        return True\n    elif x == n:\n        return True\n    else:\n        return x % n == 0\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    # Correction: We need to check if x is a multiple of n raised to an integer power\n    # This can be done using the exponentiation operator **\n    return n == 1 or x == 1 or x == n or (x % n == 0 and int(math.log(x / n) / math.log(n)) == 0)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    # Correction: Add an additional check for n being 0\n    if n == 0:\n        return False\n\n    # Correction: Use integer exponentiation instead of repeated multiplication\n    return n == 1 or x == 1 or x == n or (x // n) == (int(x ** 0.5) // n) == 0\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1 or x == 1:\n        return True\n    elif x == n:\n        return True\n    else:\n        return x % n == 0\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1 or x == 1:\n        return True\n    elif x == n:\n        return True\n    else:\n        return x % n == 0\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    # Correction: We need to check if x is a multiple of n raised to an integer power\n    # This can be done using the exponentiation operator **\n    return n == 1 or x == 1 or x == n or (x % n == 0 and n ** (int(math.log(x / n) / math.log(n))) == x)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    # Correction: Add an extra check for n being 0\n    if n == 0:\n        return False\n\n    # Correction: Use integer exponentiation instead of repeated multiplication\n    return n == 1 or x == 1 or x == n or (x // n) == (int(x ** 0.5) // n) == 0\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    # Correction: Add an extra check for n being 0\n    if n == 0:\n        return False\n\n    # Correction: Use integer exponentiation instead of repeated multiplication\n    return n == 1 or x == 1 or x == n or (x // n) == (int(x ** 0.5) // n) == 0\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1 or x == 1:\n        return True\n    elif x == n:\n        return True\n    else:\n        return x % n == 0\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1 or x == 1:\n        return True\n    elif x == n:\n        return True\n    else:\n        return x % n == 0\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    while x != 1:\n        if x % n != 0:\n            return False\n        x //= n\n    return n == 1 or x == 1\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    while x != 1:\n        if x % n != 0:\n            return False\n        x //= n\n    return n == 1 or x == 1\n"], ["def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while x % n == 0:\n        x //= n\n    return x == 1\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while x % n != 0:\n        x //= n\n    return x == 1\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while x % n == 0:\n        x //= n\n    return x == 1\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while x % n == 0:\n        x //= n\n    return x == 1\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while x % n == 0:\n        x //= n\n    return x == 1\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    False\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    while True:\n        if x % n != 0:\n            return False\n        x //= n\n        if x == 1:\n            return True\n\ncheck(is_simple_power)\n"], ["def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n is non-positive: ' + str(n))\n    if x < 0:\n        raise ValueError('x is negative: ' + str(x))\n\n    count = 0\n    while True:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        elif count >= (1024*1024*1024):\n            raise ValueError('n**x is too large, reasonable time to compute"], ["def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n == 0:\n        exp = 0\n        while x >= n:\n            x //= n\n            exp += 1\n        return exp > 1 and exp < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n != 0:\n        return False\n    exponent = 0\n    while x >= n:\n        x //= n\n        exponent += 1\n    return exponent > 1 and exponent < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n != 0:\n        return False\n    exponent = 0\n    while x >= n:\n        x //= n\n        exponent += 1\n    return exponent > 1 and exponent < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n:\n        return False\n    exp = 0\n    while x >= n:\n        x //= n\n        exp += 1\n    return exp > 1 and exp < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n != 0:\n        return False\n    exponent = 0\n    while x >= n:\n        x //= n\n        exponent += 1\n    return exponent > 1 and exponent < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n == 0:\n        exp = 0\n        while x >= n:\n            x //= n\n            exp += 1\n        return exp > 1 and exp < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n:\n        return False\n    exp = 0\n    while x >= n:\n        x //= n\n        exp += 1\n    return exp > 1 and exp < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n != 0:\n        return False\n    exp = 0\n    while x >= n:\n        x //= n\n        exp += 1\n    return exp > 1 and exp < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n == 0:\n        exp = 0\n        while x >= n:\n            x //= n\n            exp += 1\n        return exp > 1 and exp < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n == 0:\n        exp = 0\n        while x >= n:\n            x //= n\n            exp += 1\n        return exp > 1 and exp < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n:\n        return False\n    exponent = 0\n    while x >= n:\n        x //= n\n        exponent += 1\n    return exponent > 1 and exponent < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n == 0:\n        exp = 0\n        while x >= n:\n            x //= n\n            exp += 1\n        return exp > 1 and exp < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n:\n        return False\n    exponent = 0\n    while x >= n:\n        x //= n\n        exponent += 1\n    return exponent > 1 and exponent < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n != 0:\n        return False\n    exponent = 0\n    while x >= n:\n        x //= n\n        exponent += 1\n    return exponent > 1 and exponent < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n != 0:\n        return False\n    exponent = 0\n    while x >= n:\n        x //= n\n        exponent += 1\n    return exponent > 1 and exponent < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n != 0:\n        return False\n    exponent = 0\n    while x >= n:\n        x //= n\n        exponent += 1\n    return exponent > 1 and exponent < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n != 0:\n        return False\n    exponent = 0\n    while x >= n:\n        x //= n\n        exponent += 1\n    return exponent > 1 and exponent < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n:\n        return False\n    exponent = 0\n    while x >= n:\n        x //= n\n        exponent += 1\n    return exponent > 1 and exponent < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n != 0:\n        return False\n    exp = 0\n    while x >= n:\n        x //= n\n        exp += 1\n    return exp > 1 and exp < 11\n", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if x % n:\n        return False\n    exponent = 0\n    while x >= n:\n        x //= n\n        exponent += 1\n    return exponent > 1 and exponent < 11\n"], ["def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   ", "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    True\n    >>> is_simple_power(2, 2)\n    True\n    >>> is_simple_power(8, 2)\n    True\n    >>> is_simple_power(3, 2)\n    False\n    >>> is_simple_power(3, 1)\n    False\n    >>> is_simple_power(5, 3)\n    False\n    \"\"\"\n\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x == 1 or x == 4\n    if n == 5:\n        return x % 5 == 0\n    if n == 6:\n        return x == 3 or x == 9\n    if n == 7:\n        return x % 7 == 0\n   "]]